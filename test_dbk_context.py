#!/usr/bin/env python3
"""
Teste para demonstrar que o agente agora extrai automaticamente
CPF e ano calend√°rio do DBK e passa para a ferramenta LLM PDF.
"""

import os
import sys
from pathlib import Path

# Add the project root to the Python path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from agent.agent import IRPFAgent

def test_dbk_context_extraction():
    """Testa se o agente extrai corretamente o contexto do DBK."""
    
    # Inicializar o agente
    agent = IRPFAgent()
    
    # Verificar se h√° arquivos DBK dispon√≠veis
    dbk_files = list(Path("dbks").rglob("*.DBK"))
    if not dbk_files:
        print("‚ùå Nenhum arquivo DBK encontrado para teste")
        return False
    
    # Usar o primeiro arquivo DBK encontrado
    dbk_file = str(dbk_files[0])
    print(f"üìÅ Usando arquivo DBK: {dbk_file}")
    
    # Definir o arquivo DBK atual
    agent.set_current_dbk_file(dbk_file)
    
    # Verificar se as informa√ß√µes foram extra√≠das
    if agent.current_dbk_info:
        cpf = agent.current_dbk_info.get('cpf_declarante', '')
        ano = agent.current_dbk_info.get('ano_calendario', '')
        
        print(f"‚úÖ CPF extra√≠do: {cpf}")
        print(f"‚úÖ Ano calend√°rio extra√≠do: {ano}")
        
        if cpf and ano:
            print("‚úÖ SUCESSO: Informa√ß√µes do DBK extra√≠das corretamente!")
            print("\nAhora quando o agente processar um informe do Mercado Pago,")
            print("ele automaticamente usar√° essas informa√ß√µes sem pedir ao usu√°rio.")
            return True
        else:
            print("‚ùå ERRO: CPF ou ano calend√°rio n√£o foram extra√≠dos")
            return False
    else:
        print("‚ùå ERRO: N√£o foi poss√≠vel extrair informa√ß√µes do DBK")
        return False

def test_enhanced_query():
    """Testa se o contexto √© inclu√≠do na query."""
    
    agent = IRPFAgent()
    
    # Simular um DBK carregado
    agent.current_dbk_file = "dbks/exemplo.DBK"
    agent.current_dbk_info = {
        'cpf_declarante': '15499258732',
        'ano_calendario': '2025',
        'ano_exercicio': '2024'
    }
    
    # Testar o enhancement da query
    original_query = "Processar informe do Mercado Pago"
    enhanced_query = agent._enhance_query_with_context(original_query)
    
    print("üîç Query original:")
    print(original_query)
    print("\nüöÄ Query aprimorada com contexto:")
    print(enhanced_query)
    
    # Verificar se as informa√ß√µes est√£o inclu√≠das
    if '15499258732' in enhanced_query and '2025' in enhanced_query:
        print("\n‚úÖ SUCESSO: Query foi aprimorada com informa√ß√µes do DBK!")
        return True
    else:
        print("\n‚ùå ERRO: Query n√£o foi aprimorada corretamente")
        return False

if __name__ == "__main__":
    print("üß™ Testando extra√ß√£o autom√°tica de contexto do DBK\n")
    
    print("=" * 60)
    print("TESTE 1: Extra√ß√£o de informa√ß√µes do DBK")
    print("=" * 60)
    test1_passed = test_dbk_context_extraction()
    
    print("\n" + "=" * 60)
    print("TESTE 2: Enhancement da query com contexto")
    print("=" * 60)
    test2_passed = test_enhanced_query()
    
    print("\n" + "=" * 60)
    print("RESULTADO FINAL")
    print("=" * 60)
    
    if test1_passed and test2_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("\nO problema foi RESOLVIDO:")
        print("- O agente agora extrai automaticamente CPF e ano calend√°rio do DBK")
        print("- A LLM n√£o precisa mais pedir essas informa√ß√µes ao usu√°rio")
        print("- O contexto √© automaticamente inclu√≠do nas queries")
    else:
        print("‚ùå Alguns testes falharam. Verifique a implementa√ß√£o.")
    
    print(f"\nResultados: Teste 1: {'‚úÖ' if test1_passed else '‚ùå'} | Teste 2: {'‚úÖ' if test2_passed else '‚ùå'}")
